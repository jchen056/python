# -*- coding: utf-8 -*-
"""list_typle.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15TwnP6sKiIxIzoNCXFKO1UT2FpktFYbN
"""

#list creation: square brackets
my_list_1 = [1, 2, 3, 4]
type(my_list_1)

#any Python expression can be inside a list (including another list!)
my_list_2 = [1, 2.4, 'a string', ['a string in another list', 5]]
my_list_2

# create a list by type conversion
my_str = 'A string.'
list(my_str)
#-------------

#list and string operators
[1, 2, 3] + [4, 5, 6]
str_c="hello,"+"world"
print(str_c)
print(str_c*3)
[1, 2, 3] * 3
#-----------

#Membership operators
my_list_2 = [1, 2.4, 'a string', ['a string in another list', 5]]
1 in my_list_2

# Make a list of stop codons
stop_codons = ['UAA', 'UAG', 'UGA']

# Specify codon
codon = 'UGG'

# Check to see if it is a start or stop codon
if codon == 'AUG':
    print('This codon is the start codon.')
elif codon in stop_codons:
    print('This codon is a stop codon.')
else:
    print('This codon is neither a start nor stop codon.')
  #------------------

#List indexing; Indexing in Python starts at zero.
my_list = [1, 2.4, 'a string', ['a string in another list', 5]]
my_list[1]
my_list = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
my_list[0:5]
#If the sliceâ€™s final index is larger than the length of the sequence, 
#the slice ends at the last element.
my_list[3:1000]
#--------------

#Lists are mutable.
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
my_list[3] = 'four'
my_list
print("ints, floats, and strs, are immutable. You cannot change their values without reassigning them")
#id() function, which tells us where in memory that the variable is stored
a = 689
print(id(a))
a = 690
print(id(a))

#Pitfall: Aliasing
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
my_list_2 = my_list     # copy of my_list?
print("you are not making a copy when assigning lists to variables")
my_list_2[0] = 'a'
#my_list_2
my_list

print("how to make a copy of a list in py")
my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
my_list_2 = my_list[:]
my_list_2[0] = 'a'
my_list
#--------------------------

#A tuple is just like a list, except it is immutable 
#a tupe declaration using ()
#if only one element, does not forget to add ,
my_tuple = (0,)
not_a_tuple = (0) # this is just the number 0 (normal use of parantheses)

type(my_tuple)
type(not_a_tuple)
#create a tuple by doing a type conversion
my_list = [1, 2.4, 'a string', ['a sting in another list', 5]]
my_tuple = tuple(my_list)
my_tuple

#The + operator with tuples
a=my_tuple + (11, 12, 13, 14, 15)
print(a)
#------------

my_tuple = (1, 2, 3)
(a, b, c) = my_tuple
a