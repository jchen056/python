# -*- coding: utf-8 -*-
"""dict.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AmI7_Y43eaXlzDmZd5nnz13oUAyyvQ4f
"""

#dictionary syntax
#created using curly braces{}
my_dict = {'a': 6, 'b': 7, 'c': 27.6}
#my_dict

#create the dictionary using the built-in dict() function, which can take a tuple of 2-tuples
dict((('a', 6), ('b', 7), ('c', 27.6)))

dict(a='yes', b='no', c='maybe')

#any immutable object can be a key

#Indexing dictionaries
# Make a dictionary
my_dict = dict(a='yes', b='no', c='maybe')

# Pull out an entry
my_dict['b']

# The set of DNA bases
bases = ['T', 'C', 'A', 'G']

# Build list of codons
codon_list = []
for first_base in bases:
    for second_base in bases:
        for third_base in bases:
            codon_list += [first_base + second_base + third_base]

# The amino acids that are coded for (* = STOP codon)
amino_acids = 'FFLLSSSSYY**CC*WLLLLPPPPHHQQRRRRIIIMTTTTNNKKSSRRVVVVAAAADDEEGGGG'

# Build dictionary from tuple of 2-tuples (technically an iterator, but it works)
codons = dict(zip(codon_list, amino_acids))

# Show that we did it
print(codons)

#Dictionaries are mutable
# Remind ourselves what the dictionary is
print(my_dict)

# Add an entry
my_dict['d'] = 'Bootcamp is so much fun!'

# Look at dictionary again
print(my_dict)

# Change an entry
my_dict['a'] = 'I was not satisfied with entry a.'

# Look at it again
print(my_dict)

#Membership operators with dictionaries
# Make a fresh my_dict
my_dict = {'a': 1, 'b': 2, 'c': 3}

# in works with keys
'b' in my_dict, 'd' in my_dict, 'e' not in my_dict

#iteration over keys, and keys/values
for key in my_dict:
    print(key, ':', my_dict[key])
for key, value in my_dict.items():
    print(key, ':', value)

#Built-in functions for dictionaries
# Create my_list and my_dict for reference
my_dict = dict(a=1, b=2, c=3, d=4)
my_list = [1, 2, 3, 4]

# Print them
print('my_dict:', my_dict)
print('my_list:', my_list)

# Get lengths
print('length of my_dict:', len(my_dict))
print('length of my_list:', len(my_list))

# Delete a key from my_dict
del my_dict['b']

# Delete entry from my_list
del my_list[1]

# Show post-deleted objects
print('post-deleted my_dict:', my_dict)
print('post-deleted my_list:', my_list)

s=['a','b','c',1,2,3]# a list
s
s.pop(1)#remove element at index 1
s
s.append((1,2,3))#append a tuple at the end of the list
s
s.insert(0,'love')
s.insert(9,'hi')
s