# -*- coding: utf-8 -*-
"""graph.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QZ0ptDnclKXQpAODFZqmHJLjigfU9U3j

plot function
"""

# importing the required module
import matplotlib.pyplot as plt

x = [1,2,3,5]#x values
y = [2,4,1,8]#y values
 
# plotting the points
plt.plot(x, y)

# naming the x axis
plt.xlabel('x - axis')
# naming the y axis
plt.ylabel('y - axis')
# giving a title to my graph
plt.title('My first graph!')
 
# function to show the plot
plt.show()

x1 = [1,2,3]
y1 = [2,4,1]
plt.plot(x1, y1, label = "line 1")

x2 = [1,2,3]
y2 = [4,1,3]
plt.plot(x2, y2, label = "line 2")

# naming the x axis
plt.xlabel('x - axis')
# naming the y axis
plt.ylabel('y - axis')
# giving a title to my graph
plt.title('Two lines on same graph!')

# show a legend on the plot
plt.legend()

x = [1,2,3,4,5,6]
y = [2,4,1,5,2,6]
plt.plot(x,y,color='green', marker='o', linestyle='dashed',linewidth=2, markersize=12)

plt.ylim(1,8)
plt.xlim(1,8)
 
plt.xlabel('x - axis')
plt.ylabel('y - axis')

x = [1,2,3,4,5,6,7,8,9,10]
y = [2,4,5,7,6,8,9,11,12,12]
plt.scatter(x,y)
plt.xlabel('x - axis')
plt.ylabel('y - axis')
plt.title('My scatter plot!')
plt.legend()

import matplotlib.pyplot as plt
import numpy as np
 
# function to generate coordinates
def create_plot(ptype):
    # setting the x-axis values
    x = np.arange(-10, 10, 0.01)#Return evenly spaced values within a given interval
     
    # setting the y-axis values
    if ptype == 'linear':
        y = x
    elif ptype == 'quadratic':
        y = x**2
    elif ptype == 'cubic':
        y = x**3
    elif ptype == 'quartic':
        y = x**4
             
    return(x, y)

# create a figure
fig = plt.figure()#Figure acts as a top level container for all plot elements
 
# define subplots and their positions in figure
plt1 = fig.add_subplot(221)#create 2by2, put in position1
plt2 = fig.add_subplot(222)
plt3 = fig.add_subplot(223)
plt4 = fig.add_subplot(224)

x, y = create_plot('linear')
plt1.plot(x, y, color ='r')
plt1.set_title('$y_1 = x$')
 
x, y = create_plot('quadratic')
plt2.plot(x, y, color ='b')
plt2.set_title('$y_2 = x^2$')
 
x, y = create_plot('cubic')
plt3.plot(x, y, color ='g')
plt3.set_title('$y_3 = x^3$')
 
x, y = create_plot('quartic')
plt4.plot(x, y, color ='k')
plt4.set_title('$y_4 = x^4$')

from mpl_toolkits.mplot3d import axes3d#the module required to plot on 3-D space
import matplotlib.pyplot as plt
from matplotlib import style
import numpy as np
 
# setting a custom style to use
style.use('ggplot')
 
# create a new figure for plotting
fig = plt.figure()
 
# create a new subplot on our figure
# and set projection as 3d
ax1 = fig.add_subplot(111, projection='3d')
 
# defining x, y, z co-ordinates
x = np.random.randint(0, 10, size = 20)
y = np.random.randint(0, 10, size = 20)
z = np.random.randint(0, 10, size = 20)
 
# plotting the points on subplot
ax1.scatter(x, y, z, c = 'm', marker = 'o')
 
# setting labels for the axes
ax1.set_xlabel('x-axis')
ax1.set_ylabel('y-axis')
ax1.set_zlabel('z-axis')
 
# function to show the plot
plt.show()

"""**Seaborn** is an amazing visualization library for statistical graphics plotting in Python; built on the top of matplotlib library and also closely integrated into the data structures from pandas."""

import seaborn as sb
 
 
sb.set(style='whitegrid')
fmri = sb.load_dataset("fmri")
 
sb.scatterplot(x="timepoint",y="signal",data=fmri)