# -*- coding: utf-8 -*-
"""mst1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1afefr23JZO1fACm_zyb9eH7AObvsTcI4

given a connected, undirected, weighted graph, find a minal spanning tree
(1)Kruscal's algorithm
(2)prim's algorithm

A minimum spanning tree has (V â€“ 1) edges where V is the number of vertices in the given graph.
"""

class Graph:
    def __init__(self, vertex):
        self.V = vertex# number of vertices 
        self.graph = []#default dictionary to store a graph
 
    def add_edge(self, u, v, w):
        self.graph.append([u, v, w])
 
    # A utility function to find set of an element i
    # (uses path compression technique)
    def search(self, parent, i):
        if parent[i] == i:
            return i
        return self.search(parent, parent[i])
 
    # A function that does union of two sets of x and y
    # (uses union by rank)
    def apply_union(self, parent, rank, x, y):
        xroot = self.search(parent, x)
        yroot = self.search(parent, y)
         # Attach smaller rank tree under root of
        # high rank tree (Union by Rank)
        if rank[xroot] < rank[yroot]:
            parent[xroot] = yroot
        elif rank[xroot] > rank[yroot]:
            parent[yroot] = xroot
        # If ranks are same, then make one as root
        # and increment its rank by one
        else:
            parent[yroot] = xroot
            rank[xroot] += 1
 
  
    def kruskal(self):
        result = []
        # An index variable, used for sorted edges
        # An index variable, used for result[]
        i, e = 0, 0
        # Step 1:  Sort all the edges in
        # non-decreasing order of their
        # weight.  If we are not allowed to change the
        # given graph, we can create a copy of graph
        self.graph = sorted(self.graph, key=lambda item: item[2])
        parent = []
        rank = []

           # Create V subsets with single elements
        for node in range(self.V):
            parent.append(node)
            rank.append(0)

          # Number of edges to be taken is equal to V-1
        while e < self.V - 1:
          # Step 2: Pick the smallest edge and increment
            # the index for next iteration
            u, v, w = self.graph[i]
            i = i + 1
            x = self.search(parent, u)
            y = self.search(parent, v)
            # If including this edge does't
            #  cause cycle, include it in result
            #  and increment the indexof result
            # for next edge
            if x != y:
                e = e + 1
                result.append([u, v, w])
                self.apply_union(parent, rank, x, y)
        minimumCost = 0
        print ("Edges in the constructed MST")
        for u, v, weight in result:
            minimumCost += weight
            print("Edge:",u, v,end =" ")
            print("-",weight)
        print("Minimum Spanning Tree" , minimumCost)
 
 
# Driver code
g = Graph(4)
g.add_edge(0, 1, 10)
g.add_edge(0, 2, 6)
g.add_edge(0, 3, 5)
g.add_edge(1, 3, 15)
g.add_edge(2, 3, 4)
 
# Function call
g.kruskal()