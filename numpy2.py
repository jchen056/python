# -*- coding: utf-8 -*-
"""numpy2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nUuPbx1HkE_gsR0eZ1CE0l7Lt3iRRlWw

NumPy’s random number generator
"""

import numpy as np
#uniform random number generator
np.random.seed(123)#seed NumPy’s rng so that we can get the same numbers
np.random.rand(3) #three random samples from a uniform distribution via random.rand

#standard normal distribution
rng2 = np.random.RandomState(seed=123)
z_scores = rng2.randn(100, 2)
z_scores

import matplotlib.pyplot as plt
plt.scatter(z_scores[:,0],z_scores[:,1])
plt.show()

"""NumPy provides a **reshape method** that allow us to obtain a view of an array with a different shape.(**size is fixed**)"""

ary1d = np.array([1, 2, 3, 4, 5, 6])
ary2d_view = ary1d.reshape(2, 3)
ary2d_view

"""**merging different arrays**. Unfortunately, there is no efficient way to do this without creating a new array since *NumPy arrays have a fixed size.*"""

ary = np.array([1, 2, 3])
np.concatenate((ary, ary,ary))
np.concatenate((ary, ary), axis=0)

"""there is also **a special matrix type in NumPy**(2d).

NumPy matrix objects are analogous to NumPy arrays but are re-
stricted to two dimensions.
"""

#In NumPy, we can perform
#matrix multiplication via the matmul function:
matrix=np.array([[1,2,3],[4,5,6]])
np.matmul(matrix, matrix.transpose())

"""the output of **np.unique is a regular NumPy array**, not specialized data structure
that does not allow for duplicate entries.
"""

#set theory using numpy array
ary = np.array([1, 1, 2, 3, 1, 5])
ary_set = np.unique(ary)
ary_set


#union
ary1 = np.array([1, 2, 3])
ary2 = np.array([3, 4, 5, 6])
np.intersect1d(ary1, ary2, assume_unique=True)
np.union1d(ary1, ary2) # does not have assume_unique