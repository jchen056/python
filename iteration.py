# -*- coding: utf-8 -*-
"""iteration.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12FQ_4kj9mGgRoxRvNQZrvCmjORG_AtJA
"""

#range() function
for i in range(10):
    print(i, end='  ')
print()

# Print numbers 2 through 9
for i in range(2, 10):
    print(i, end='  ')

# Print a newline
print()

# Print even numbers, 2 through 9
for i in range(2, 10, 2):
    print(i, end='     ')

my_integers = [1, 2, 3, 4, 5]

# Since len(my_integers) = 5, this takes i from 0 to 4,
# exactly the indices of my_integers
for i in range(len(my_integers)):
    my_integers[i] *= 2

my_integers

#enumerate function enum erate()
# The sequence we want to analyze
seq = 'GACAGACUCCAUGCACGUGGGUAUCUGUC'
# Loop through sequence and print index of G's
for i, base in enumerate(seq):
    if base in 'Gg':
        print(i, end='  ')
print()
# Print index and identity of bases
for i, base in enumerate(seq):
    print(i, base)

my_integers = [1, 2, 3, 4, 5]

#underscore, _, as a throwaway variable that we do not use.
# Double each one
for i, _ in enumerate(my_integers):
    my_integers[i] *= 2
# Check out the result
my_integers

#zip() function enables us to iterate over several iterables at once.
names = ('Dunn', 'Ertz', 'Lavelle', 'Rapinoe')
positions = ('D', 'MF', 'MF', 'F')
numbers = (19, 8, 16, 15)

for num, pos, name in zip(numbers, positions, names):
    print(num, name, pos)

#The reversed() function
count_up = ('ignition', 1, 2, 3, 4, 5, 6, 7, 8 ,9, 10)

for count in reversed(count_up):
    print(count)