# -*- coding: utf-8 -*-
"""floydwarshall.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qMIveGommDmgW3y615-CYDXI322cFECO
"""

# Python Program for Floyd Warshall Algorithm
  
# Number of vertices in the graph
V = 5
  
# Define infinity as the large 
# enough value. This value will be
# used for vertices not connected to each other
INF = 99999
  
# Solves all pair shortest path 
# via Floyd Warshall Algorithm
  
def floydWarshall(graph):
    
    """ dist[][] will be the output matrix that will finally
        have the shortest distances between every pair of vertices """
    """ initializing the solution matrix same as input graph matrix
    OR we can say that the initial 
    values of shortest distances
    are based on shortest paths considering no 
    intermediate vertices """
  
    dist = list(map(lambda i: list(map(lambda j: j, i)), graph))
    print("-----------D"+str(0)+"----------------")
    printSolution(dist)
    """ Add all vertices one by one to the set of intermediate vertices.
     ---> Before start of an iteration, 
     we have shortest distances
     between all pairs of vertices 
     such that the shortest
     distances consider only the 
     vertices in the set 
    {0, 1, 2, .. k-1} as intermediate vertices.
      ----> After the end of a 
      iteration, vertex no. k is
     added to the set of intermediate 
     vertices and the 
    set becomes {0, 1, 2, .. k}
    """
    for k in range(V):
        # pick all vertices as source one by one
        print("-----------D"+str(k+1)+"----------------")
        for i in range(V):
            
            # Pick all vertices as destination for the
            # above picked source
            for j in range(V):
  
                # If vertex k is on the shortest path from
                # i to j, then update the value of dist[i][j]
                dist[i][j] = min(dist[i][j],
                                 dist[i][k] + dist[k][j]
                                 )
        
        printSolution(dist)
    #printSolution(dist)
  
  
# A utility function to print the solution
def printSolution(dist):
    #print("Following matrix shows the shortest distances between every pair of vertices")
    for i in range(V):
        for j in range(V):
            if(dist[i][j] == INF):
                print ("INF",end="\t")
            else:
                print (str(dist[i][j]),end="\t")
            if j == V-1:
                print (" ")
  
  
# Driver program to test the above program
# Let us create the following weighted graph
"""
            10
       (0)------->(3)
        |         /|\
      5 |          |
        |          | 1
       \|/         |
       (1)------->(2)
            3           """
graph = [[0, 3, 8, INF, -4],
         [INF, 0, INF,1, 7],
         [INF, 4,0,INF, INF],
         [2,INF,-5,0,INF],
         [INF,INF,INF,6,0]
         ]
# Print the solution
floydWarshall(graph)
# This code is contributed by Mythri J L

# Recursive function to print the path of given vertex `u` from source vertex `v`
# def printPath(path, v, u, route):
#     if path[v][u] == v:
#         return
#     printPath(path, v, path[v][u], route)
#     route.append(path[v][u])
 
 
# # Function to print the shortest cost with path
# # information between all pairs of vertices
# def printSolution(path, n):
#     for v in range(n):
#         for u in range(n):
#             if u != v and path[v][u] != -1:
#                 route = [v]
#                 printPath(path, v, u, route)
#                 route.append(u)
#                 print(f'The shortest path from {v} —> {u} is', route)
 
 
# Function to run the Floyd–Warshall algorithm
def floydWarshall(adjMatrix):
 
    # base case
    if not adjMatrix:
        return
 
    # total number of vertices in the `adjMatrix`
    n = len(adjMatrix)
 
    # cost and path matrix stores shortest path
    # (shortest cost/shortest route) information
 
    # initially, cost would be the same as the weight of an edge
    cost = adjMatrix.copy()
    path = [[None for x in range(n)] for y in range(n)]
 
    # initialize cost and path
    for v in range(n):
        for u in range(n):
            if v == u:
                path[v][u] = 'inf'
            elif cost[v][u] != I:
                path[v][u] = v+1
            else:
                path[v][u] = 'inf'
    printSolution(path)
    # run Floyd–Warshall
    for k in range(n):
        print()
        for v in range(n):
            for u in range(n):
                # If vertex `k` is on the shortest path from `v` to `u`,
                # then update the value of cost[v][u] and path[v][u]
                if cost[v][k] + cost[k][u] < cost[v][u]:
                    cost[v][u] = cost[v][k] + cost[k][u]
                    path[v][u] = path[k][u]
 
            # if diagonal elements become negative, the
            # graph contains a negative-weight cycle
            if cost[v][v] < 0:
                print('Negative-weight cycle found')
                return
        printSolution(path)
 
    # Print the shortest path between all pairs of vertices
    #printSolution(path, n)
 
 
if __name__ == '__main__':
 
    # define infinity
    I = 99999
 
    # given adjacency representation of the matrix
    adjMatrix = [
        [0, 3,8,I, -4],
        [I, 0,I,1,7],
        [I, 4,0,I, I],
        [2,I, -5, 0,I],
        [I,I,I,6,0]
    ]
 
    # Run Floyd–Warshall algorithm
    floydWarshall(adjMatrix)