# -*- coding: utf-8 -*-
"""dfs.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hR8A_vxYsSePagBwmX64aSGfdA-YwWx3

# The algorithm starts at the root node (selecting some arbitrary node as the root node in the case of a graph) and ***explores as far as possible along each branch before backtracking***
"""

# # Python3 program to print DFS traversal from a given given graph
# from collections import defaultdict
 
# # This class represents a directed graph using
# # adjacency list representation
 
# class Graph:
 
#     # Constructor
#     def __init__(self):
 
#         # default dictionary to store graph
#         self.graph = defaultdict(list)
 
#     # function to add an edge to graph
#     def addEdge(self, u, v):
#         self.graph[u].append(v)
 
#     # A function used by DFS
#     def DFSUtil(self, v, visited):
#         # Mark the current node as visited
#         # and print it
#         visited.add(v)
#         print(v, end=' ')
 
#         # Recur for all the vertices
#         # adjacent to this vertex
#         for neighbour in self.graph[v]:
#             if neighbour not in visited:
#                 self.DFSUtil(neighbour, visited)
 
#     # The function to do DFS traversal. It uses
#     # recursive DFSUtil()
#     def DFS(self, v):
 
#         # Create a set to store visited vertices
#         visited = set()
 
#         # Call the recursive helper function
#         # to print DFS traversal
#         self.DFSUtil(v, visited)
 
# # Driver code
 
 
# # Create a graph given
# # in the above diagram
# g = Graph()
# g.addEdge(0, 1)
# g.addEdge(0, 2)
# g.addEdge(1, 2)
# g.addEdge(2, 0)
# g.addEdge(2, 3)
# g.addEdge(3, 3)
# print("Following is DFS from (starting from vertex 2)")
# g.DFS(2)

graph = {
  '0' : ['1','2','6'],
  '1' : ['0','3', '5'],
  '2' : ['0','3'],
  '3' : ['1','2','4','5'],
  '4' : ['3','5'],
  '5' : ['1','3','5'],
  '6':['0']
}

visited = set() # Set to keep track of visited nodes of graph.

def dfs(visited, graph, node):  #function for dfs 
    if node not in visited:
        print (node,end="\t")
        print("dfs({})".format(node),end=" ")
        visited.add(node)
        print("visted:{}".format(visited))
        for neighbour in graph[node]:
            dfs(visited, graph, neighbour)

# Driver Code
print("Following is the Depth-First Search")
dfs(visited, graph, '0')